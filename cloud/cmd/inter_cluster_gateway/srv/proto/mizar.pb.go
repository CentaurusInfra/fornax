// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mizar.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	mizar.proto

It has these top-level messages:
	CreateVpcGatewayRequest
	CreateSubnetRequest
	DeleteVpcGatewayRequest
	DeleteSubnetRequest
	Response
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Response_CodeType int32

const (
	Response_Error Response_CodeType = 0
	Response_OK    Response_CodeType = 1
)

var Response_CodeType_name = map[int32]string{
	0: "Error",
	1: "OK",
}
var Response_CodeType_value = map[string]int32{
	"Error": 0,
	"OK":    1,
}

func (x Response_CodeType) String() string {
	return proto1.EnumName(Response_CodeType_name, int32(x))
}
func (Response_CodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type CreateVpcGatewayRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Namespace     string `protobuf:"bytes,2,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
	GatewayName   string `protobuf:"bytes,3,opt,name=GatewayName,json=gatewayName" json:"GatewayName,omitempty"`
	GatewayHostIP string `protobuf:"bytes,4,opt,name=GatewayHostIP,json=gatewayHostIP" json:"GatewayHostIP,omitempty"`
}

func (m *CreateVpcGatewayRequest) Reset()                    { *m = CreateVpcGatewayRequest{} }
func (m *CreateVpcGatewayRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateVpcGatewayRequest) ProtoMessage()               {}
func (*CreateVpcGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateVpcGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVpcGatewayRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateVpcGatewayRequest) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

func (m *CreateVpcGatewayRequest) GetGatewayHostIP() string {
	if m != nil {
		return m.GatewayHostIP
	}
	return ""
}

type CreateSubnetRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Namespace     string `protobuf:"bytes,2,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
	Virtual       bool   `protobuf:"varint,3,opt,name=Virtual,json=virtual" json:"Virtual,omitempty"`
	IP            string `protobuf:"bytes,4,opt,name=IP,json=iP" json:"IP,omitempty"`
	Prefix        string `protobuf:"bytes,5,opt,name=Prefix,json=prefix" json:"Prefix,omitempty"`
	Vpc           string `protobuf:"bytes,6,opt,name=Vpc,json=vpc" json:"Vpc,omitempty"`
	Vni           string `protobuf:"bytes,7,opt,name=Vni,json=vni" json:"Vni,omitempty"`
	Status        string `protobuf:"bytes,8,opt,name=Status,json=status" json:"Status,omitempty"`
	RemoteGateway string `protobuf:"bytes,9,opt,name=RemoteGateway,json=remoteGateway" json:"RemoteGateway,omitempty"`
	Bouncers      int32  `protobuf:"varint,10,opt,name=Bouncers,json=bouncers" json:"Bouncers,omitempty"`
}

func (m *CreateSubnetRequest) Reset()                    { *m = CreateSubnetRequest{} }
func (m *CreateSubnetRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateSubnetRequest) ProtoMessage()               {}
func (*CreateSubnetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateSubnetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSubnetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateSubnetRequest) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

func (m *CreateSubnetRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *CreateSubnetRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *CreateSubnetRequest) GetVpc() string {
	if m != nil {
		return m.Vpc
	}
	return ""
}

func (m *CreateSubnetRequest) GetVni() string {
	if m != nil {
		return m.Vni
	}
	return ""
}

func (m *CreateSubnetRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CreateSubnetRequest) GetRemoteGateway() string {
	if m != nil {
		return m.RemoteGateway
	}
	return ""
}

func (m *CreateSubnetRequest) GetBouncers() int32 {
	if m != nil {
		return m.Bouncers
	}
	return 0
}

type DeleteVpcGatewayRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Namespace     string `protobuf:"bytes,2,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
	GatewayName   string `protobuf:"bytes,3,opt,name=GatewayName,json=gatewayName" json:"GatewayName,omitempty"`
	GatewayHostIP string `protobuf:"bytes,4,opt,name=GatewayHostIP,json=gatewayHostIP" json:"GatewayHostIP,omitempty"`
}

func (m *DeleteVpcGatewayRequest) Reset()                    { *m = DeleteVpcGatewayRequest{} }
func (m *DeleteVpcGatewayRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteVpcGatewayRequest) ProtoMessage()               {}
func (*DeleteVpcGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteVpcGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteVpcGatewayRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteVpcGatewayRequest) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

func (m *DeleteVpcGatewayRequest) GetGatewayHostIP() string {
	if m != nil {
		return m.GatewayHostIP
	}
	return ""
}

type DeleteSubnetRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
}

func (m *DeleteSubnetRequest) Reset()                    { *m = DeleteSubnetRequest{} }
func (m *DeleteSubnetRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteSubnetRequest) ProtoMessage()               {}
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteSubnetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteSubnetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type Response struct {
	ReturnCode Response_CodeType `protobuf:"varint,1,opt,name=ReturnCode,json=returnCode,enum=proto.Response_CodeType" json:"ReturnCode,omitempty"`
	Message    string            `protobuf:"bytes,2,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Response) GetReturnCode() Response_CodeType {
	if m != nil {
		return m.ReturnCode
	}
	return Response_Error
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*CreateVpcGatewayRequest)(nil), "proto.CreateVpcGatewayRequest")
	proto1.RegisterType((*CreateSubnetRequest)(nil), "proto.CreateSubnetRequest")
	proto1.RegisterType((*DeleteVpcGatewayRequest)(nil), "proto.DeleteVpcGatewayRequest")
	proto1.RegisterType((*DeleteSubnetRequest)(nil), "proto.DeleteSubnetRequest")
	proto1.RegisterType((*Response)(nil), "proto.Response")
	proto1.RegisterEnum("proto.Response_CodeType", Response_CodeType_name, Response_CodeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MizarService service

type MizarServiceClient interface {
	CreateVpcGateway(ctx context.Context, in *CreateVpcGatewayRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteVpcGateway(ctx context.Context, in *DeleteVpcGatewayRequest, opts ...grpc.CallOption) (*Response, error)
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*Response, error)
}

type mizarServiceClient struct {
	cc *grpc.ClientConn
}

func NewMizarServiceClient(cc *grpc.ClientConn) MizarServiceClient {
	return &mizarServiceClient{cc}
}

func (c *mizarServiceClient) CreateVpcGateway(ctx context.Context, in *CreateVpcGatewayRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.MizarService/CreateVpcGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mizarServiceClient) DeleteVpcGateway(ctx context.Context, in *DeleteVpcGatewayRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.MizarService/DeleteVpcGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mizarServiceClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.MizarService/CreateSubnet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mizarServiceClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.MizarService/DeleteSubnet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MizarService service

type MizarServiceServer interface {
	CreateVpcGateway(context.Context, *CreateVpcGatewayRequest) (*Response, error)
	DeleteVpcGateway(context.Context, *DeleteVpcGatewayRequest) (*Response, error)
	CreateSubnet(context.Context, *CreateSubnetRequest) (*Response, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*Response, error)
}

func RegisterMizarServiceServer(s *grpc.Server, srv MizarServiceServer) {
	s.RegisterService(&_MizarService_serviceDesc, srv)
}

func _MizarService_CreateVpcGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpcGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MizarServiceServer).CreateVpcGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MizarService/CreateVpcGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MizarServiceServer).CreateVpcGateway(ctx, req.(*CreateVpcGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MizarService_DeleteVpcGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpcGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MizarServiceServer).DeleteVpcGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MizarService/DeleteVpcGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MizarServiceServer).DeleteVpcGateway(ctx, req.(*DeleteVpcGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MizarService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MizarServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MizarService/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MizarServiceServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MizarService_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MizarServiceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MizarService/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MizarServiceServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MizarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MizarService",
	HandlerType: (*MizarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVpcGateway",
			Handler:    _MizarService_CreateVpcGateway_Handler,
		},
		{
			MethodName: "DeleteVpcGateway",
			Handler:    _MizarService_DeleteVpcGateway_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _MizarService_CreateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _MizarService_DeleteSubnet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mizar.proto",
}

func init() { proto1.RegisterFile("mizar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x4e, 0xe2, 0xd8, 0x93, 0xb6, 0x44, 0x53, 0x09, 0x56, 0x11, 0xa0, 0x28, 0xe2, 0xd0,
	0x53, 0x0e, 0xe5, 0x82, 0xc4, 0x8d, 0x80, 0x0a, 0x42, 0x85, 0x68, 0x83, 0x72, 0xdf, 0x98, 0x21,
	0xb2, 0x54, 0xef, 0x2e, 0xbb, 0xeb, 0x40, 0x91, 0x38, 0x73, 0x87, 0x1f, 0x46, 0xde, 0x75, 0x82,
	0x9b, 0xb6, 0x17, 0xb8, 0xf4, 0x14, 0xbd, 0x37, 0xf3, 0x66, 0xdf, 0xe4, 0x79, 0x60, 0x50, 0x16,
	0xdf, 0x85, 0x99, 0x6a, 0xa3, 0x9c, 0xc2, 0x9e, 0xff, 0x99, 0xfc, 0x8e, 0xe0, 0xe1, 0xcc, 0x90,
	0x70, 0xb4, 0xd4, 0xf9, 0x99, 0x70, 0xf4, 0x55, 0x5c, 0x72, 0xfa, 0x52, 0x91, 0x75, 0x88, 0xd0,
	0x7d, 0x2f, 0x4a, 0x62, 0xd1, 0x38, 0x3a, 0xc9, 0x78, 0x57, 0x8a, 0x92, 0xf0, 0x11, 0x64, 0x35,
	0x67, 0xb5, 0xc8, 0x89, 0xc5, 0xbe, 0x90, 0xc9, 0x2d, 0x81, 0x63, 0x18, 0x34, 0x33, 0xbc, 0xb0,
	0xe3, 0xeb, 0x83, 0xf5, 0x5f, 0x0a, 0x9f, 0xc2, 0x61, 0xd3, 0xf1, 0x46, 0x59, 0xf7, 0x76, 0xce,
	0xba, 0xbe, 0xe7, 0x70, 0xdd, 0x26, 0x27, 0x3f, 0x63, 0x38, 0x0e, 0xae, 0x16, 0xd5, 0x4a, 0x92,
	0xfb, 0x77, 0x47, 0x0c, 0xfa, 0xcb, 0xc2, 0xb8, 0x4a, 0x5c, 0x78, 0x37, 0x29, 0xef, 0x6f, 0x02,
	0xc4, 0x23, 0x88, 0x77, 0xcf, 0xc7, 0xc5, 0x1c, 0x1f, 0x40, 0x32, 0x37, 0xf4, 0xb9, 0xf8, 0xc6,
	0x7a, 0x9e, 0x4b, 0xb4, 0x47, 0x38, 0x84, 0xce, 0x52, 0xe7, 0x2c, 0xf1, 0x64, 0x67, 0xa3, 0x73,
	0xcf, 0xc8, 0x82, 0xf5, 0x1b, 0x46, 0x16, 0xb5, 0x76, 0xe1, 0x84, 0xab, 0x2c, 0x4b, 0x83, 0xd6,
	0x7a, 0x54, 0x6f, 0xcb, 0xa9, 0x54, 0x8e, 0x9a, 0x9d, 0x59, 0x16, 0xb6, 0x35, 0x6d, 0x12, 0x47,
	0x90, 0xbe, 0x54, 0x95, 0xcc, 0xc9, 0x58, 0x06, 0xe3, 0xe8, 0xa4, 0xc7, 0xd3, 0x55, 0x83, 0x7d,
	0x3e, 0xaf, 0xe8, 0x82, 0xee, 0x56, 0x3e, 0x67, 0x70, 0x1c, 0x4c, 0xfd, 0x67, 0x3c, 0x93, 0x1f,
	0x90, 0x72, 0xb2, 0x5a, 0x49, 0x4b, 0xf8, 0x1c, 0x80, 0x93, 0xab, 0x8c, 0x9c, 0xa9, 0x4f, 0x61,
	0xc6, 0xd1, 0x29, 0x0b, 0x5f, 0xeb, 0x74, 0xdb, 0x34, 0xad, 0x6b, 0x1f, 0x2f, 0x35, 0x71, 0x30,
	0xbb, 0xde, 0x3a, 0xe4, 0x73, 0xb2, 0x56, 0xac, 0xb7, 0x2f, 0xf4, 0xcb, 0x00, 0x27, 0x8f, 0x21,
	0xdd, 0x2a, 0x30, 0x83, 0xde, 0x6b, 0x63, 0x94, 0x19, 0xde, 0xc3, 0x04, 0xe2, 0x0f, 0xef, 0x86,
	0xd1, 0xe9, 0xaf, 0x18, 0x0e, 0xce, 0xeb, 0xa3, 0x58, 0x90, 0xd9, 0x14, 0x39, 0xe1, 0x0c, 0x86,
	0xfb, 0xd7, 0x80, 0x4f, 0x1a, 0x0f, 0xb7, 0x9c, 0xc9, 0xe8, 0xfe, 0x9e, 0xc7, 0x7a, 0xc8, 0x7e,
	0x64, 0xbb, 0x21, 0xb7, 0x64, 0x79, 0x7d, 0xc8, 0x0b, 0x38, 0x68, 0x5f, 0x00, 0x8e, 0xae, 0xb8,
	0xb8, 0xf2, 0xbf, 0xdf, 0x28, 0x6e, 0xe7, 0xb3, 0x13, 0xdf, 0x10, 0xda, 0x35, 0xf1, 0x2a, 0xf1,
	0xf8, 0xd9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x99, 0x21, 0x42, 0x2f, 0x04, 0x00, 0x00,
}
